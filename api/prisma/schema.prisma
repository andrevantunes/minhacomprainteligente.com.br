// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                  Int                   @id @default(autoincrement())
  email               String?
  phone               String?
  password            String?
  provider            String
  social_id           String?
  name                String?
  role                String?
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now())
  deleted_at          DateTime?
  properties_managers properties_managers[]
  users_companies     users_companies[]
  carts               carts[]
  withdraws           withdraws[]
}

model pages {
  path       String    @id @unique
  value      Json
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
}

model companies {
  id                  Int                   @id @default(autoincrement())
  name                String
  slug                String                @unique
  logo                String?
  hello_message       String?
  cnpj                String?
  created_at          DateTime
  updated_at          DateTime
  deleted_at          DateTime?
  properties_managers properties_managers[]
  companies_products  companies_products[]
  users_companies     users_companies[]
  withdraws           withdraws[]
  balances            balances[]
}

model products {
  id                            Int                             @id @default(autoincrement())
  name                          String
  image                         String?
  created_at                    DateTime
  updated_at                    DateTime
  deleted_at                    DateTime?
  companies_products            companies_products[]
  properties_products           properties_products[]
  cart_products                 cart_products[]
  replacement_property_products replacement_property_products[]

  @@index([name])
}

model addresses {
  id            Int          @id @default(autoincrement())
  country       String
  state         String?
  city          String
  neighbourhood String?
  street        String
  street_number String
  complement    String?
  refference    String?
  created_at    DateTime
  updated_at    DateTime
  deleted_at    DateTime?
  properties    properties[]
  orders        orders[]
}

model properties {
  id                            Int                             @id @default(autoincrement())
  hash                          String
  name                          String?
  image                         String?
  address_id                    Int
  address                       addresses                       @relation(fields: [address_id], references: [id])
  created_at                    DateTime
  updated_at                    DateTime
  deleted_at                    DateTime?
  properties_managers           properties_managers[]
  properties_products           properties_products[]
  carts                         carts[]
  replacement_property_products replacement_property_products[]
}

model properties_managers {
  id          Int                 @id @default(autoincrement())
  company_id  Int
  company     companies           @relation(fields: [company_id], references: [id])
  property_id Int
  property    properties          @relation(fields: [property_id], references: [id])
  user_id     Int
  user        users               @relation(fields: [user_id], references: [id])
  type        PropertyManagerType
  created_at  DateTime            @default(now())
  updated_at  DateTime            @default(now())
  deleted_at  DateTime?
}

enum PropertyManagerType {
  owner // Indica que o usuário é o proprietário da propriedade.
  administrator // Um administrador geral responsável por coordenar as operações na propriedade.
  company_manager // Representa uma empresa contratada para gerenciar a propriedade, como uma administradora de aluguel por temporada.
  cleaning_staff // Refere-se à equipe de limpeza que presta serviços regulares para a propriedade.
  maintenance // Representa a equipe responsável pela manutenção física da propriedade.
  temporary_agent // Representa um agente temporário ou freelancer contratado para executar uma tarefa específica, como check-ins.
}

model companies_products {
  product_id Int
  product    products  @relation(fields: [product_id], references: [id])
  company_id Int
  company    companies @relation(fields: [company_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  @@id([product_id, company_id])
}

model users_companies {
  type       String
  company_id Int
  company    companies @relation(fields: [company_id], references: [id])
  user_id    Int
  user       users     @relation(fields: [user_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  @@id([user_id, company_id])
}

model properties_products {
  expected_quantity Int
  current_quantity  Int
  price             Int
  category          String
  product_id        Int
  product           products   @relation(fields: [product_id], references: [id])
  property_id       Int
  property          properties @relation(fields: [property_id], references: [id])
  created_at        DateTime   @default(now())
  updated_at        DateTime   @default(now())
  deleted_at        DateTime?

  @@id([product_id, property_id])
}

model carts {
  id            Int             @id @default(autoincrement())
  hash          String          @unique
  fingerprint   String
  total_price   Int
  user_id       Int?
  status        CartStatus      @default(pending)
  user          users?          @relation(fields: [user_id], references: [id])
  property_id   Int
  property      properties      @relation(fields: [property_id], references: [id])
  cart_products cart_products[]
  orders        orders[]
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  deleted_at    DateTime?
}

enum CartStatus {
  pending
  completed
  cancelled
}

model cart_products {
  quantity       Int
  unity_price    Int
  subtotal_price Int
  product_id     Int
  product        products  @relation(fields: [product_id], references: [id])
  cart_id        Int
  cart           carts     @relation(fields: [cart_id], references: [id])
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  deleted_at     DateTime?

  @@id([product_id, cart_id])
}

model orders {
  id                Int          @id @default(autoincrement())
  name              String?
  document_number   String?
  discount          Int?
  amount            Int
  status            OrderStatus?
  acquirer          String?
  acquirer_id       String?
  acquirer_metadata Json?
  currency          Currency     @default(BRL)
  cart_id           Int
  cart              carts        @relation(fields: [cart_id], references: [id])
  address_id        Int?
  address           addresses?   @relation(fields: [address_id], references: [id])
  payments          payments[]
  created_at        DateTime     @default(now())
  updated_at        DateTime     @default(now())
  deleted_at        DateTime?

  @@index([document_number])
  @@index([name])
}

enum OrderStatus {
  paid
  pending
  authorized
  captured
  failed
  refunded
  cancelled
  chargeback
}

enum Currency {
  BRL
  USD
  MXN
  CLP
  COP
  PEN
  ARS
  CRC
  DOP
  PAB
  UYU
  GTQ
  PYG
}

model payments {
  id                Int           @id @default(autoincrement())
  amount            Int
  method            String
  status            PaymentStatus
  currency          Currency      @default(BRL)
  acquirer          String
  acquirer_id       String
  acquirer_metadata Json
  order_id          Int
  order             orders        @relation(fields: [order_id], references: [id])
  created_at        DateTime      @default(now())
  updated_at        DateTime      @default(now())
  deleted_at        DateTime?

  @@index([acquirer_id])
}

enum PaymentStatus {
  paid
  captured
  pending
  authorized
  failed
  refunded
  cancelled
  chargeback
  not_authorized
  waiting_payment
}

model replacements {
  id                            Int                             @id @default(autoincrement())
  status                        String
  replacement_property_products replacement_property_products[]
  created_at                    DateTime                        @default(now())
  updated_at                    DateTime                        @default(now())
  deleted_at                    DateTime?
}

enum ReplacementStatus {
  separated_for_replacement
  in_transit
  delivered
  cancelled
  returned
  processing
}

model replacement_property_products {
  quantity         Int
  unity_paid_price Int
  property_id      Int
  property         properties   @relation(fields: [property_id], references: [id])
  product_id       Int
  product          products     @relation(fields: [product_id], references: [id])
  replacement_id   Int
  replacement      replacements @relation(fields: [replacement_id], references: [id])
  created_at       DateTime     @default(now())
  updated_at       DateTime     @default(now())
  deleted_at       DateTime?

  @@id([property_id, product_id, replacement_id])
}

model withdraws {
  id                Int            @id @default(autoincrement())
  amount            Int
  tax               Int
  status            WithdrawStatus
  currency          Currency       @default(BRL)
  company_id        Int
  company           companies      @relation(fields: [company_id], references: [id])
  user_requester_id Int
  user_requester    users          @relation(fields: [user_requester_id], references: [id])
  ip                String
  fingerprint       String
  created_at        DateTime       @default(now())
  updated_at        DateTime       @default(now())
  deleted_at        DateTime?
}

enum WithdrawStatus {
  pending
  paid
  refused
}

model balances {
  id         Int       @id @default(autoincrement())
  amount     Int
  type       String
  currency   Currency  @default(BRL)
  company_id Int
  company    companies @relation(fields: [company_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
}
